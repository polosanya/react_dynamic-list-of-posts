{"version":3,"sources":["components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostsList","posts","postId","setPostId","className","length","map","post","userId","title","id","type","onClick","Loader","BASE_URL","getRequest","endpoint","a","fetch","response","json","Error","removeRequest","method","postRequest","body","headers","JSON","stringify","getPostComments","removePostComment","commentId","postComment","comment","NewCommentForm","React","memo","fetchComments","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBody","isInputFill","setIsInputFill","isLoading","setLoading","removeFillError","updateComments","newComment","onSubmit","event","preventDefault","name","email","value","placeholder","onChange","target","getAllPosts","getUserPosts","getPostDetails","PostDetails","postDetails","setPostDetails","postComments","setPostComments","setIsLoading","isHidden","setHidden","postCommentsFromServer","fetchPostDetails","postDetailsFromServer","useEffect","filter","c","getAllUsers","App","users","setUsers","setPosts","selectedUserId","setSelectedUserId","fetchUsers","usersFromServer","fetchPosts","postsFromServer","fetchUserPosts","postsUsersFromServer","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46313613.chunk.js","sourcesContent":["import React from 'react';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  postId: number,\n  setPostId: (id: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postId,\n  setPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length === 0\n      ? <p>Posts not found</p>\n      : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n\n              {postId === post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => setPostId(0)}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => setPostId(post.id)}\n                  >\n                    Open\n                  </button>\n                )}\n            </li>\n          ))}\n        </ul>\n      )}\n  </div>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`${error}`);\n  }\n};\n\nexport const removeRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n    });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`${error}`);\n  }\n};\n\nexport const postRequest = async (endpoint: string, body: PostComment) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`${error}`);\n  }\n};\n","import { removeRequest, getRequest, postRequest } from './api';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => (\n  getRequest(`/comments?postId=${postId}`)\n);\n\nexport const removePostComment = async (commentId: number) => (\n  removeRequest(`/comments/${commentId}`)\n);\n\nexport const postComment = async (comment: PostComment) => (\n  postRequest('/comments', comment)\n);\n","import React, { useState } from 'react';\nimport { postComment } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nimport { Loader } from '../Loader';\n\ntype Props = {\n  postId: number,\n  fetchComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(\n  ({ postId, fetchComments }) => {\n    const [newCommentName, setNewCommentName] = useState('');\n    const [newCommentEmail, setNewCommentEmail] = useState('');\n    const [newCommentBody, setNewCommentBody] = useState('');\n    const [isInputFill, setIsInputFill] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n\n    const removeFillError = () => {\n      if (isInputFill) {\n        setIsInputFill(false);\n      }\n    };\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setNewCommentName(event.target.value);\n      removeFillError();\n    };\n\n    const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setNewCommentEmail(event.target.value);\n      removeFillError();\n    };\n\n    const handleBodyChange = (\n      event: React.ChangeEvent<HTMLTextAreaElement>,\n    ) => {\n      setNewCommentBody(event.target.value);\n      removeFillError();\n    };\n\n    const updateComments = async (newComment: PostComment) => {\n      await postComment(newComment);\n      await fetchComments();\n      setLoading(false);\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (!newCommentName || !newCommentEmail || !newCommentBody) {\n        setIsInputFill(true);\n      } else {\n        setLoading(true);\n\n        const newComment = {\n          postId,\n          name: newCommentName,\n          email: newCommentEmail,\n          body: newCommentBody,\n        };\n\n        updateComments(newComment);\n        setNewCommentName('');\n        setNewCommentEmail('');\n        setNewCommentBody('');\n      }\n    };\n\n    return (\n      <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n        <div className=\"form-field\">\n          <input\n            value={newCommentName}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            onChange={handleNameChange}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            value={newCommentEmail}\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            onChange={handleEmailChange}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            value={newCommentBody}\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n        {isLoading && <Loader />}\n        {isInputFill && <h3>Fill all fields</h3>}\n      </form>\n    );\n  },\n);\n","import { getRequest } from './api';\n\nexport const getAllPosts = async (): Promise<Post[]> => getRequest('/posts');\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => (\n  getRequest(`/posts?userId=${userId}`)\n);\n\nexport const getPostDetails = async (postId: number): Promise<Post> => (\n  getRequest(`/posts/${postId}`)\n);\n","import React, { useEffect, useState } from 'react';\nimport './PostDetails.scss';\n\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { removePostComment, getPostComments } from '../../api/comments';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState<Post>();\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isHidden, setHidden] = useState(true);\n\n  const fetchComments = async () => {\n    const postCommentsFromServer = await getPostComments(postId);\n\n    setPostComments(postCommentsFromServer);\n    setIsLoading(false);\n  };\n\n  const fetchPostDetails = async () => {\n    const postDetailsFromServer = await getPostDetails(postId);\n\n    setIsLoading(true);\n    setPostDetails(postDetailsFromServer);\n    fetchComments();\n  };\n\n  useEffect(() => {\n    if (postId !== 0) {\n      fetchPostDetails();\n    }\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {isLoading\n        ? <Loader />\n        : (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails?.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {postComments.length === 0\n                ? <p>No comments</p>\n                : (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => setHidden(!isHidden)}\n                    >\n                      {`${isHidden ? 'Hide' : 'Show'} ${postComments.length} comments`}\n                    </button>\n\n                    {isHidden && (\n                      <ul className=\"PostDetails__list\">\n                        {postComments.map(comment => (\n                          <li\n                            className=\"PostDetails__list-item\"\n                            key={comment.id}\n                          >\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              onClick={() => {\n                                removePostComment(comment.id);\n                                setPostComments(postComments\n                                  .filter(c => c.id !== comment.id));\n                              }}\n                            >\n                              X\n                            </button>\n                            <p>{comment.body}</p>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  postId={postId}\n                  fetchComments={fetchComments}\n                />\n              </div>\n            </section>\n          </>\n        )}\n    </div>\n  );\n};\n","import { getRequest } from './api';\n\nexport const getAllUsers = async (): Promise<User[]> => getRequest('/users');\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllUsers } from './api/users';\nimport { getAllPosts, getUserPosts } from './api/posts';\n\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [postId, setPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const fetchUsers = async () => {\n    setIsLoading(true);\n\n    const usersFromServer = await getAllUsers();\n\n    setUsers(usersFromServer);\n  };\n\n  const fetchPosts = async () => {\n    const postsFromServer = await getAllPosts();\n\n    setPosts(postsFromServer);\n    setIsLoading(false);\n  };\n\n  const fetchUserPosts = async () => {\n    setIsLoading(true);\n    const postsUsersFromServer = await getUserPosts(selectedUserId);\n\n    setPosts(postsUsersFromServer);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      fetchPosts();\n    } else {\n      fetchUserPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"user-selector\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"user-selector\"\n            value={selectedUserId}\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                postId={postId}\n                setPostId={setPostId}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          {postId !== 0\n            && <PostDetails postId={postId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}